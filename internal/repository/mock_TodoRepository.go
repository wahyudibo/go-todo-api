// Code generated by mockery v2.18.0. DO NOT EDIT.

package repository

import (
	mock "github.com/stretchr/testify/mock"
	models "github.com/wahyudibo/go-todo-api/internal/repository/models"
)

// MockTodoRepository is an autogenerated mock type for the TodoRepository type
type MockTodoRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: description
func (_m *MockTodoRepository) Create(description string) error {
	ret := _m.Called(description)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(description)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: todoID
func (_m *MockTodoRepository) Delete(todoID int64) (bool, error) {
	ret := _m.Called(todoID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int64) bool); ok {
		r0 = rf(todoID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(todoID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: todoID
func (_m *MockTodoRepository) GetByID(todoID int64) (*models.Todo, error) {
	ret := _m.Called(todoID)

	var r0 *models.Todo
	if rf, ok := ret.Get(0).(func(int64) *models.Todo); ok {
		r0 = rf(todoID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Todo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(todoID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields:
func (_m *MockTodoRepository) List() ([]models.Todo, error) {
	ret := _m.Called()

	var r0 []models.Todo
	if rf, ok := ret.Get(0).(func() []models.Todo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Todo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: todoID, updates
func (_m *MockTodoRepository) Update(todoID int64, updates map[string]interface{}) (*models.Todo, error) {
	ret := _m.Called(todoID, updates)

	var r0 *models.Todo
	if rf, ok := ret.Get(0).(func(int64, map[string]interface{}) *models.Todo); ok {
		r0 = rf(todoID, updates)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Todo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, map[string]interface{}) error); ok {
		r1 = rf(todoID, updates)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockTodoRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockTodoRepository creates a new instance of MockTodoRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockTodoRepository(t mockConstructorTestingTNewMockTodoRepository) *MockTodoRepository {
	mock := &MockTodoRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
